{"version":3,"sources":["components/startAnimation/startAnimation.module.css","App.tsx","drawGrid.tsx","components/intro/intro.tsx","components/header/header.tsx","components/options/options.tsx","components/startAnimation/startAnimation.tsx","reportWebVitals.ts","index.tsx","components/header/header.module.css","components/options/options.module.css","components/intro/intro.module.css"],"names":["module","exports","grid","head","food","fillOneCellOnGrid","cell","color","copyGrid","y","x","Intro","startGame","type","className","style","button","onClick","line","pizza","src","alt","Header","headerScore","showGameOptions","isGameStarted","stopGame","buttonWrapper","header","image","heading","score","gridSize","name","size","speedLevel","time","Options","handleOptions","cancelOption","gameGridSize","gameMoveTime","useState","selectedSpeedLevel","setSelectedSpeedLevel","selectedGridSize","setSelectedGrizSize","OptionsWrapper","options","action","onSubmit","event","htmlFor","label","dropDownList","id","value","onChange","e","parseInt","target","map","level","StartAnimation","animationWrapper","animation","possibleKeyPress","tail","directions","App","setHeaderScore","setGridSize","moveTime","setMoveTime","refreshGrid","setRefreshGrid","start","gameOver","levelUpAnimation","introAnimation","startAnimation","gameOptions","setGameOptions","useEffect","document","body","addEventListener","keyPressHandler","key","findNextKeypress","positionCheck","moveTail","moveHead","interval","setInterval","clearInterval","length","splice","pressedKey","forEach","allowedDirection","push","t","dir","addNewFruit","_","shift","endGameHandler","selectedGrid","selectedSpeed","preventDefault","element","el","width","height","gridArr","gridArr2d","i","j","drawGrid","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a7fd7779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"animationWrapper\":\"startAnimation_animationWrapper__hstpp\",\"animation\":\"startAnimation_animation__1gQOd\",\"gogogo\":\"startAnimation_gogogo__1yxvF\"};","import React, {useState, useEffect} from 'react';\nimport * as _ from 'lodash';\nimport './App.css';\nimport 'flexboxgrid';\nimport {drawGrid, Grid, Cell, Direction, fillOneCellOnGrid} from './drawGrid';\nimport Intro from './components/intro/intro';\nimport Header from './components/header/header';\nimport Options from './components/options/options';\nimport StartAnimation from './components/startAnimation/startAnimation';\n\n// const gridSize = 22;\nlet grid: Grid[][];\n\nconst possibleKeyPress: Direction[] = ['ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'];\n\nlet head: Cell;\nlet food: Cell;\nconst tail: Cell[] = [];\nconst directions: Direction[] = ['ArrowRight'];\nlet score = 0;\n\nconst App = () => {\n  const [headerScore, setHeaderScore] = useState(0);\n  const [gridSize, setGridSize] = useState(15);\n  const [moveTime, setMoveTime] = useState(200);\n\n  const [refreshGrid, setRefreshGrid] = useState(true);\n  const [gameOptions, setGameOptions] = useState({\n    start: false,\n    gameOver: false,\n    levelUpAnimation: false,\n    introAnimation: false,\n    options: false,\n    startAnimation: false,\n  });\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', (e) => {\n      keyPressHandler(e.key);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!gameOptions.start) {\n      return;\n    }\n    findNextKeypress();\n    positionCheck();\n    moveTail();\n    moveHead(directions[0]);\n    const interval = setInterval(() => {\n      setRefreshGrid(!refreshGrid);\n    }, moveTime);\n    // eslint-disable-next-line consistent-return\n    return () => clearInterval(interval);\n  }, [refreshGrid]);\n\n  const startGame = () => {\n    setGameOptions({...gameOptions, startAnimation: true, start: true});\n    grid = drawGrid(gridSize);\n    setTimeout(() => {\n      setGameOptions({...gameOptions, startAnimation: false, start: true});\n      head = {x: 2, y: 0};\n      tail.splice(0, tail.length);\n      tail.push({x: 0, y: 0});\n      tail.push({x: 1, y: 0});\n      food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n      fillOneCellOnGrid(head, 'snake', grid);\n      tail.forEach((t) => fillOneCellOnGrid(t, 'tail', grid));\n      fillOneCellOnGrid(food, 'food', grid);\n      directions.push('ArrowRight');\n      setRefreshGrid(!refreshGrid);\n    }, 3000);\n  };\n\n  const findNextKeypress = () => {\n    if (directions.length > 1) {\n      // eslint-disable-next-line prefer-destructuring\n      directions.splice(0, 1);\n    }\n  };\n\n  const keyPressHandler = (pressedKey: string) => {\n    possibleKeyPress.forEach((allowedDirection) => {\n      if (pressedKey === allowedDirection) {\n        if (pressedKey === 'ArrowLeft' && directions[0] === 'ArrowRight') {\n          return;\n        }\n        if (pressedKey === 'ArrowRight' && directions[0] === 'ArrowLeft') {\n          return;\n        }\n        if (pressedKey === 'ArrowDown' && directions[0] === 'ArrowUp') {\n          return;\n        }\n        if (pressedKey === 'ArrowUp' && directions[0] === 'ArrowDown') {\n          return;\n        }\n        directions.push(pressedKey);\n      }\n    });\n  };\n\n  const positionCheck = () => {\n    tail.forEach((t) => {\n      if (t.x === head.x && t.y === head.y) {\n        setGameOptions({...gameOptions, start: false, gameOver: true});\n      }\n    });\n  };\n\n  const moveHead = (dir: string) => {\n    switch (dir) {\n      case 'ArrowRight':\n        if (head.x === gridSize - 1) {\n          head = {x: 0, y: head.y};\n        } else {\n          head = {x: head.x + 1, y: head.y};\n        }\n\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n\n      case 'ArrowDown':\n        if (head.y === gridSize - 1) {\n          head = {x: head.x, y: 0};\n        } else {\n          head = {x: head.x, y: head.y + 1};\n        }\n\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n      case 'ArrowLeft':\n        if (head.x === 0) {\n          head = {x: gridSize - 1, y: head.y};\n        } else {\n          head = {x: head.x - 1, y: head.y};\n        }\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n      case 'ArrowUp':\n        if (head.y === 0) {\n          head = {x: head.x, y: gridSize - 1};\n        } else {\n          head = {x: head.x, y: head.y - 1};\n        }\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n    }\n  };\n\n  const moveTail = () => {\n    tail.push({x: head.x, y: head.y});\n    // fillOneCell(tail[0], 'empty');\n    fillOneCellOnGrid(tail[0], 'empty', grid);\n    addNewFruit();\n    // tail.forEach((t) => fillOneCell(t, 'tail'));\n    tail.forEach((t) => fillOneCellOnGrid(t, 'tail', grid));\n  };\n\n  const addNewFruit = () => {\n    if (head.x === food.x && head.y === food.y) {\n      if (score % 10 === 0) {\n        if (moveTime > 50) {\n          setMoveTime(moveTime - 5);\n        }\n      }\n      score += 1;\n      setHeaderScore(headerScore + 1);\n      food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n      // fillOneCell(food, 'food');\n      fillOneCellOnGrid(food, 'food', grid);\n      // showAnimation();\n    } else {\n      tail.shift();\n    }\n    tail.forEach((t) => {\n      if (t.x === food.x && t.y === food.y) {\n        food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n        // fillOneCell(food, 'food');\n        fillOneCellOnGrid(food, 'food', grid);\n      }\n    });\n  };\n\n  // const showAnimation = () => {\n  //   if (score === 0 || score % 10) {\n  //     return;\n  //   }\n  //   setGameOptions({...gameOptions, levelUpAnimation: true});\n  //   // console.log('animation  On');\n  //   setTimeout(() => {\n  //     // console.log('timeout');\n  //     setGameOptions({...gameOptions, levelUpAnimation: false});\n  //   }, 4000);\n  // };\n\n  const handleOptions = (\n    event: React.FormEvent<HTMLFormElement>,\n    selectedGrid: number,\n    selectedSpeed: number\n  ) => {\n    event.preventDefault();\n    setGridSize(selectedGrid);\n    setMoveTime(selectedSpeed);\n    setGameOptions({...gameOptions, options: false});\n  };\n\n  const endGameHandler = () => {\n    setGameOptions({...gameOptions, start: false, gameOver: false});\n    score = 0;\n    setHeaderScore(0);\n    directions.splice(0, directions.length);\n  };\n\n  return (\n    <div>\n      <div className=\"container center-xs\">\n        <Header\n          stopGame={() => endGameHandler()}\n          headerScore={headerScore}\n          isGameStarted={gameOptions.start}\n          showGameOptions={() => setGameOptions({...gameOptions, options: true})}\n        />\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <div className=\"game\">\n              {/* {introAnimation  && <IntroAnimation>} */}\n              {gameOptions.options && (\n                <Options\n                  gameMoveTime={moveTime}\n                  gameGridSize={gridSize}\n                  handleOptions={handleOptions}\n                  cancelOption={() => setGameOptions({...gameOptions, options: false})}\n                />\n              )}\n              {!gameOptions.start ? (\n                <Intro startGame={() => startGame()} />\n              ) : (\n                <>\n                  {gameOptions.levelUpAnimation && (\n                    <div className=\"animation\">\n                      <h1>LEVEL UP</h1>\n                      <h1>SPEED +10</h1>\n                    </div>\n                  )}\n                  {gameOptions.startAnimation && <StartAnimation />}\n                  {grid &&\n                    grid.map((element) =>\n                      element.map((el) => (\n                        <span\n                          className={el.cell}\n                          key={el.id}\n                          style={{width: `${800 / gridSize}px`, height: `${800 / gridSize}px`}}\n                        >\n                          {/* {el.id} */}\n                        </span>\n                      ))\n                    )}\n                </>\n              )}\n              {gameOptions.gameOver && (\n                <button\n                  type=\"button\"\n                  className=\"button button--gameOver\"\n                  onClick={() => endGameHandler()}\n                >\n                  {' '}\n                  <span className=\"score\"> Congratz, you got {score} points! </span>\n                  Play Again!\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export type CellColor = 'empty' | 'snake' | 'food' | 'tail';\r\nexport type Direction = 'ArrowUp' | 'ArrowRight' | 'ArrowLeft' | 'ArrowDown';\r\nexport type Cell = {x: number; y: number};\r\nexport type Grid = {id: number; cell: CellColor};\r\n\r\nexport const drawGrid = (size: number): Grid[][] => {\r\n  let gridArr: Grid[] = [];\r\n  const gridArr2d: Grid[][] = [];\r\n  let id = 1;\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      gridArr.push({id, cell: 'empty'});\r\n      id += 1;\r\n    }\r\n    gridArr2d.push(gridArr);\r\n    gridArr = [];\r\n  }\r\n  return gridArr2d;\r\n};\r\n\r\nexport const fillOneCellOnGrid = (cell: Cell, color: CellColor, grid: Grid[][]) => {\r\n  const copyGrid = [...grid];\r\n  copyGrid[cell.y][cell.x].cell = color;\r\n  return copyGrid;\r\n};\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport style from './intro.module.css';\r\n\r\ntype Props = {\r\n  startGame: () => void;\r\n};\r\n\r\nconst Intro: FC<Props> = ({startGame}) => {\r\n  return (\r\n    <button type=\"button\" className={style.button} onClick={startGame}>\r\n      {' '}\r\n      start\r\n      <div className={style.line}>\r\n        {' '}\r\n        {/* <span className={style.ayes}>:-)</span>{' '} */}\r\n      </div>\r\n      <span className={style.food}>\r\n        <img\r\n          className={style.pizza}\r\n          src=\"https://image.similarpng.com/very-thumbnail/2020/06/Cartoon-funny-pizza-royalty-free-PNG.png\"\r\n          alt=\"pizza\"\r\n        />{' '}\r\n      </span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React, {FC} from 'react';\r\nimport style from './header.module.css';\r\n\r\ntype Props = {\r\n  isGameStarted: boolean;\r\n  headerScore: number;\r\n  showGameOptions: () => void;\r\n  stopGame: () => void;\r\n};\r\n\r\nconst Header: FC<Props> = ({headerScore, showGameOptions, isGameStarted, stopGame}) => {\r\n  return (\r\n    <div className={style.buttonWrapper}>\r\n      <div className={style.header}>\r\n        <img\r\n          src=\"https://www.iconarchive.com/download/i24292/martin-berube/animal/snake.ico\"\r\n          alt=\"image1\"\r\n          className={style.image}\r\n        />\r\n        {isGameStarted ? (\r\n          <h1 className={style.heading}>\r\n            {' '}\r\n            {headerScore > 0 && (\r\n              <span className={style.score}>\r\n                {headerScore}\r\n                {headerScore === 1 ? ' point' : ' points'}\r\n              </span>\r\n            )}\r\n          </h1>\r\n        ) : (\r\n          <h1 className={style.heading}> THIS IS SNAKE GAME !</h1>\r\n        )}\r\n\r\n        <div className={style.buttonWrapper}>\r\n          {isGameStarted ? (\r\n            <>\r\n              <button type=\"button\" onClick={stopGame} className={style.button}>\r\n                end game\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {/* <button type=\"button\">results</button> */}\r\n              <button type=\"button\" onClick={showGameOptions} className={style.button}>\r\n                options\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, {FC, useState} from 'react';\r\nimport style from './options.module.css';\r\n\r\nconst gridSize = [\r\n  {name: 'small', size: 10},\r\n  {name: 'medium', size: 15},\r\n  {name: 'large', size: 22},\r\n  {name: 'extra large', size: 30},\r\n];\r\n\r\nconst speedLevel = [\r\n  {name: 'slow', time: 350},\r\n  {name: 'medium', time: 250},\r\n  {name: 'fast', time: 180},\r\n  {name: 'extra fast', time: 120},\r\n];\r\n\r\ntype Props = {\r\n  handleOptions: (event: React.FormEvent<HTMLFormElement>, a: number, b: number) => void;\r\n  cancelOption: () => void;\r\n  gameGridSize: number;\r\n  gameMoveTime: number;\r\n};\r\n\r\ntype SpeedLevel = {\r\n  name: string;\r\n  time: number;\r\n};\r\n\r\ntype GridSize = {\r\n  name: string;\r\n  size: number;\r\n};\r\nconst Options: FC<Props> = ({handleOptions, cancelOption, gameGridSize, gameMoveTime}) => {\r\n  const [selectedSpeedLevel, setSelectedSpeedLevel] = useState(gameMoveTime);\r\n  const [selectedGridSize, setSelectedGrizSize] = useState(gameGridSize);\r\n\r\n  return (\r\n    <div className={style.OptionsWrapper}>\r\n      <form\r\n        className={style.options}\r\n        action=\"submit\"\r\n        onSubmit={(event) => handleOptions(event, selectedGridSize, selectedSpeedLevel)}\r\n      >\r\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\r\n        <label htmlFor=\"gridSize\" className={style.label}>\r\n          Select grid size\r\n          <select\r\n            className={style.dropDownList}\r\n            id=\"gridSize\"\r\n            name=\"gridSize\"\r\n            value={selectedGridSize}\r\n            onChange={(e) => setSelectedGrizSize(parseInt(e.target.value, 10))}\r\n          >\r\n            {gridSize.map((grid: GridSize) => (\r\n              <option key={grid.name} value={grid.size}>\r\n                {grid.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"gridSize\" className={style.label}>\r\n          Select game speed\r\n          <select\r\n            className={style.dropDownList}\r\n            name=\"speedLevel\"\r\n            value={selectedSpeedLevel}\r\n            onChange={(e) => setSelectedSpeedLevel(parseInt(e.target.value, 10))}\r\n          >\r\n            {speedLevel.map((level: SpeedLevel) => (\r\n              <option key={level.name} value={level.time}>\r\n                {level.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <div className={style.buttonWrapper}>\r\n          <button type=\"submit\" className={style.button}>\r\n            {' '}\r\n            SAVE\r\n          </button>\r\n          <button type=\"button\" className={style.button} onClick={cancelOption}>\r\n            CANCEL\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from 'react';\r\nimport style from './startAnimation.module.css';\r\n\r\nconst StartAnimation = () => {\r\n  return (\r\n    <div className={style.animationWrapper}>\r\n      <span className={style.animation}>\r\n        <span style={{color: 'pink'}}>Let's</span>\r\n        <span style={{color: 'red'}}>GO!!!</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartAnimation;\r\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__ICvco\",\"header\":\"header_header__3Vlc7\",\"image\":\"header_image__1Cakm\",\"buttonWrapper\":\"header_buttonWrapper__20iO5\",\"heading\":\"header_heading__C-U5B\",\"score\":\"header_score__3vZfW\",\"button\":\"header_button__1MuEN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OptionsWrapper\":\"options_OptionsWrapper__2PsF9\",\"options\":\"options_options__nr3ev\",\"label\":\"options_label__1SrfS\",\"dropDownList\":\"options_dropDownList__log8M\",\"buttonWrapper\":\"options_buttonWrapper__3xNVZ\",\"button\":\"options_button__3uHSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"intro_intro__3YOy4\",\"button\":\"intro_button__1PKgd\",\"line\":\"intro_line__3SoZ_\",\"snake\":\"intro_snake__2zjXx\",\"ayes\":\"intro_ayes__3-uH2\",\"pizza\":\"intro_pizza__3e0vr\"};"],"sourceRoot":""}