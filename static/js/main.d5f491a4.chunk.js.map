{"version":3,"sources":["components/header/header.module.css","components/options/options.module.css","components/results/results.module.css","components/gameOver/gameOver.module.css","components/intro/intro.module.css","components/startAnimation/startAnimation.module.css","App.tsx","drawGrid.tsx","components/intro/intro.tsx","components/header/header.tsx","components/options/options.tsx","components/startAnimation/startAnimation.tsx","components/results/results.tsx","components/gameOver/gameOver.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","grid","head","food","fillOneCellOnGrid","cell","color","copyGrid","y","x","Intro","startGame","type","className","style","button","onClick","line","pizza","src","alt","Header","headerScore","showGameOptions","showGameResults","isGameStarted","stopGame","buttonWrapper","header","image","heading","score","gridSize","name","size","speedLevel","time","Options","handleOptions","cancelOption","gameGridSize","gameMoveTime","activeOptions","useState","selectedSpeedLevel","setSelectedSpeedLevel","selectedGridSize","setSelectedGrizSize","OptionsWrapper","active","options","action","onSubmit","event","htmlFor","label","dropDownList","id","value","onChange","e","parseInt","target","map","level","StartAnimation","animationWrapper","animation","firstWord","secondWord","Results","cancelResults","activeResults","results","ResultsWrapper","resultList","GameOver","endGameHandler","handleResults","resultName","inputNameHandler","gameOver","inputWrapper","possibleKeyPress","uuidv4","tail","directions","moveTime","App","setGridSize","setResultName","refreshGrid","setRefreshGrid","start","levelUpAnimation","introAnimation","startAnimation","gameOptions","setGameOptions","useEffect","document","body","addEventListener","keyPressHandler","key","findNextKeypress","positionCheck","moveTail","moveHead","interval","setInterval","clearInterval","length","splice","pressedKey","forEach","allowedDirection","push","t","dir","addNewFruit","_","shift","selectedGrid","selectedSpeed","preventDefault","element","el","width","height","gridArr","gridArr2d","i","j","drawGrid","setTimeout","newObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d5f491a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__ICvco\",\"header\":\"header_header__3Vlc7\",\"image\":\"header_image__1Cakm\",\"buttonWrapper\":\"header_buttonWrapper__20iO5\",\"heading\":\"header_heading__C-U5B\",\"score\":\"header_score__3vZfW\",\"button\":\"header_button__1MuEN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OptionsWrapper\":\"options_OptionsWrapper__2PsF9\",\"active\":\"options_active__1_rN1\",\"options\":\"options_options__nr3ev\",\"label\":\"options_label__1SrfS\",\"dropDownList\":\"options_dropDownList__log8M\",\"buttonWrapper\":\"options_buttonWrapper__3xNVZ\",\"button\":\"options_button__3uHSc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResultsWrapper\":\"results_ResultsWrapper__3ogL1\",\"active\":\"results_active__3dI35\",\"results\":\"results_results__1ndpj\",\"resultList\":\"results_resultList__2QQ0a\",\"button\":\"results_button__2TF1X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameOver\":\"gameOver_gameOver__3CFCK\",\"button\":\"gameOver_button__2g2dt\",\"score\":\"gameOver_score__XbhoP\",\"label\":\"gameOver_label__1fnPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"intro_intro__3YOy4\",\"button\":\"intro_button__1PKgd\",\"line\":\"intro_line__3SoZ_\",\"snake\":\"intro_snake__2zjXx\",\"ayes\":\"intro_ayes__3-uH2\",\"pizza\":\"intro_pizza__3e0vr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"animationWrapper\":\"startAnimation_animationWrapper__hstpp\",\"firstWord\":\"startAnimation_firstWord__eTseP\",\"secondWord\":\"startAnimation_secondWord__3f4zB\",\"animation\":\"startAnimation_animation__1gQOd\",\"gogogo\":\"startAnimation_gogogo__1yxvF\"};","import React, {useState, useEffect} from 'react';\nimport * as _ from 'lodash';\nimport './App.css';\nimport 'flexboxgrid';\nimport {v4 as uuidv4} from 'uuid';\nimport {drawGrid, Grid, Cell, Direction, fillOneCellOnGrid} from './drawGrid';\nimport Intro from './components/intro/intro';\nimport Header from './components/header/header';\nimport Options from './components/options/options';\nimport StartAnimation from './components/startAnimation/startAnimation';\nimport Results from './components/results/results';\nimport GameOver from './components/gameOver/gameOver';\n\n// const gridSize = 22;\nlet grid: Grid[][];\n\nconst possibleKeyPress: Direction[] = ['ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'];\nconst results = [\n  {id: uuidv4(), name: 'john', score: 99, speedLevel: 'fast', gridSize: 'large'},\n  {id: uuidv4(), name: 'peter', score: 99, speedLevel: 'fast', gridSize: 'large'},\n];\n\nexport type Result = {\n  id: string;\n  name: string;\n  score: number;\n  speedLevel: string;\n  gridSize: string;\n};\n\nlet head: Cell;\nlet food: Cell;\nconst tail: Cell[] = [];\nconst directions: Direction[] = ['ArrowRight'];\nlet score = 0;\nlet moveTime = 250;\n\nconst App = () => {\n  const [gridSize, setGridSize] = useState(22);\n  const [resultName, setResultName] = useState('');\n\n  const [refreshGrid, setRefreshGrid] = useState(true);\n  const [gameOptions, setGameOptions] = useState({\n    start: false,\n    gameOver: false,\n    levelUpAnimation: false,\n    introAnimation: false,\n    options: false,\n    results: false,\n    startAnimation: false,\n  });\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', (e) => {\n      keyPressHandler(e.key);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!gameOptions.start) {\n      return;\n    }\n    findNextKeypress();\n    positionCheck();\n    moveTail();\n    moveHead(directions[0]);\n    const interval = setInterval(() => {\n      setRefreshGrid(!refreshGrid);\n    }, moveTime);\n    // eslint-disable-next-line consistent-return\n    return () => clearInterval(interval);\n  }, [refreshGrid]);\n\n  const startGame = () => {\n    setGameOptions({...gameOptions, startAnimation: true, start: true});\n    grid = drawGrid(gridSize);\n    setTimeout(() => {\n      setGameOptions({...gameOptions, startAnimation: false, start: true});\n      head = {x: 2, y: 0};\n      tail.splice(0, tail.length);\n      tail.push({x: 0, y: 0});\n      tail.push({x: 1, y: 0});\n      food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n      fillOneCellOnGrid(head, 'snake', grid);\n      tail.forEach((t) => fillOneCellOnGrid(t, 'tail', grid));\n      fillOneCellOnGrid(food, 'food', grid);\n      directions.push('ArrowRight');\n      setRefreshGrid(!refreshGrid);\n    }, 3000);\n  };\n\n  const findNextKeypress = () => {\n    if (directions.length > 1) {\n      directions.splice(0, 1);\n    }\n  };\n\n  const keyPressHandler = (pressedKey: string) => {\n    possibleKeyPress.forEach((allowedDirection) => {\n      if (pressedKey === allowedDirection) {\n        if (pressedKey === 'ArrowLeft' && directions[0] === 'ArrowRight') {\n          return;\n        }\n        if (pressedKey === 'ArrowRight' && directions[0] === 'ArrowLeft') {\n          return;\n        }\n        if (pressedKey === 'ArrowDown' && directions[0] === 'ArrowUp') {\n          return;\n        }\n        if (pressedKey === 'ArrowUp' && directions[0] === 'ArrowDown') {\n          return;\n        }\n        directions.push(pressedKey);\n      }\n    });\n  };\n\n  const positionCheck = () => {\n    tail.forEach((t) => {\n      if (t.x === head.x && t.y === head.y) {\n        setGameOptions({...gameOptions, start: false, gameOver: true});\n      }\n    });\n  };\n\n  const moveHead = (dir: string) => {\n    switch (dir) {\n      case 'ArrowRight':\n        if (head.x === gridSize - 1) {\n          head = {x: 0, y: head.y};\n        } else {\n          head = {x: head.x + 1, y: head.y};\n        }\n\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n\n      case 'ArrowDown':\n        if (head.y === gridSize - 1) {\n          head = {x: head.x, y: 0};\n        } else {\n          head = {x: head.x, y: head.y + 1};\n        }\n\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n      case 'ArrowLeft':\n        if (head.x === 0) {\n          head = {x: gridSize - 1, y: head.y};\n        } else {\n          head = {x: head.x - 1, y: head.y};\n        }\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n      case 'ArrowUp':\n        if (head.y === 0) {\n          head = {x: head.x, y: gridSize - 1};\n        } else {\n          head = {x: head.x, y: head.y - 1};\n        }\n        fillOneCellOnGrid({x: head.x, y: head.y}, 'snake', grid);\n        break;\n    }\n  };\n\n  const moveTail = () => {\n    tail.push({x: head.x, y: head.y});\n    fillOneCellOnGrid(tail[0], 'empty', grid);\n    addNewFruit();\n    tail.forEach((t) => fillOneCellOnGrid(t, 'tail', grid));\n  };\n\n  const addNewFruit = () => {\n    if (head.x === food.x && head.y === food.y) {\n      if (score % 10 === 0) {\n        if (moveTime > 50) {\n          moveTime -= 5;\n        }\n      }\n      score += 1;\n      food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n      fillOneCellOnGrid(food, 'food', grid);\n      // showAnimation();\n    } else {\n      tail.shift();\n    }\n    tail.forEach((t) => {\n      if (t.x === food.x && t.y === food.y) {\n        food = {x: _.random(gridSize - 1), y: _.random(gridSize - 1)};\n        fillOneCellOnGrid(food, 'food', grid);\n      }\n    });\n  };\n\n  // const showAnimation = () => {\n  //   if (score === 0 || score % 10) {\n  //     return;\n  //   }\n  //   setGameOptions({...gameOptions, levelUpAnimation: true});\n  //   // console.log('animation  On');\n  //   setTimeout(() => {\n  //     // console.log('timeout');\n  //     setGameOptions({...gameOptions, levelUpAnimation: false});\n  //   }, 4000);\n  // };\n\n  const handleOptions = (\n    event: React.FormEvent<HTMLFormElement>,\n    selectedGrid: number,\n    selectedSpeed: number\n  ) => {\n    event.preventDefault();\n    setGridSize(selectedGrid);\n    moveTime = selectedSpeed;\n    setGameOptions({...gameOptions, options: false});\n  };\n\n  const endGameHandler = () => {\n    setGameOptions({...gameOptions, start: false, gameOver: false});\n    score = 0;\n    directions.splice(0, directions.length);\n  };\n\n  const handleResults = () => {\n\n    const newObj: Result = {\n      id: uuidv4(),\n      name: resultName,\n      score,\n      speedLevel: 'fast',\n      gridSize: 'fast',\n    };\n    results.push(newObj);\n    setResultName('');\n    setGameOptions({...gameOptions, gameOver: false, start: false});\n    score = 0;\n    directions.splice(0, directions.length);\n\n  };\n\n\n  return (\n    <div>\n      <div className=\"container center-xs\">\n        <Header\n          stopGame={() => endGameHandler()}\n          headerScore={score}\n          isGameStarted={gameOptions.start}\n          showGameOptions={() => setGameOptions({...gameOptions, options: true})}\n          showGameResults={() => setGameOptions({...gameOptions, results: true})}\n        />\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <div className=\"game\">\n              <Options\n                activeOptions={gameOptions.options}\n                gameMoveTime={moveTime}\n                gameGridSize={gridSize}\n                handleOptions={handleOptions}\n                cancelOption={() => setGameOptions({...gameOptions, options: false})}\n              />\n              <Results\n                activeResults={gameOptions.results}\n                cancelResults={() => setGameOptions({...gameOptions, results: false})}\n                results={results}\n              />\n\n              {!gameOptions.start ? (\n                <Intro startGame={() => startGame()} />\n              ) : (\n                <>\n                  {gameOptions.levelUpAnimation && (\n                    <div className=\"animation\">\n                      <h1>LEVEL UP</h1>\n                      <h1>SPEED +10</h1>\n                    </div>\n                  )}\n                  {gameOptions.startAnimation && <StartAnimation />}\n                  {grid &&\n                    grid.map((element) =>\n                      element.map((el) => (\n                        <span\n                          className={el.cell}\n                          key={el.id}\n                          style={{width: `${800 / gridSize}px`, height: `${800 / gridSize}px`}}\n                        >\n                          {/* {el.id} */}\n                        </span>\n                      ))\n                    )}\n                </>\n              )}\n              {gameOptions.gameOver && (\n                <GameOver\n                  endGameHandler={() => endGameHandler()}\n                  score={score}\n                  resultName={resultName}\n                  inputNameHandler={(e) => setResultName(e.target.value)}\n                  handleResults={handleResults}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export type CellColor = 'empty' | 'snake' | 'food' | 'tail';\r\nexport type Direction = 'ArrowUp' | 'ArrowRight' | 'ArrowLeft' | 'ArrowDown';\r\nexport type Cell = {x: number; y: number};\r\nexport type Grid = {id: number; cell: CellColor};\r\n\r\nexport const drawGrid = (size: number): Grid[][] => {\r\n  let gridArr: Grid[] = [];\r\n  const gridArr2d: Grid[][] = [];\r\n  let id = 1;\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      gridArr.push({id, cell: 'empty'});\r\n      id += 1;\r\n    }\r\n    gridArr2d.push(gridArr);\r\n    gridArr = [];\r\n  }\r\n  return gridArr2d;\r\n};\r\n\r\nexport const fillOneCellOnGrid = (cell: Cell, color: CellColor, grid: Grid[][]) => {\r\n  const copyGrid = [...grid];\r\n  copyGrid[cell.y][cell.x].cell = color;\r\n  return copyGrid;\r\n};\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport style from './intro.module.css';\r\n\r\ntype Props = {\r\n  startGame: () => void;\r\n};\r\n\r\nconst Intro: FC<Props> = ({startGame}) => {\r\n  return (\r\n    <button type=\"button\" className={style.button} onClick={startGame}>\r\n      {' '}\r\n      start\r\n      <div className={style.line}>\r\n        {' '}\r\n        {/* <span className={style.ayes}>:-)</span>{' '} */}\r\n      </div>\r\n      <span className={style.food}>\r\n        <img\r\n          className={style.pizza}\r\n          src=\"https://image.similarpng.com/very-thumbnail/2020/06/Cartoon-funny-pizza-royalty-free-PNG.png\"\r\n          alt=\"pizza\"\r\n        />{' '}\r\n      </span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","\r\nimport React, {FC} from 'react';\r\nimport style from './header.module.css';\r\n\r\ntype Props = {\r\n  isGameStarted: boolean;\r\n  headerScore: number;\r\n  showGameOptions: () => void;\r\n  showGameResults: () => void;\r\n  stopGame: () => void;\r\n};\r\n\r\nconst Header: FC<Props> = ({headerScore, showGameOptions, showGameResults, isGameStarted, stopGame}) => {\r\n  return (\r\n    <div className={style.buttonWrapper}>\r\n      <div className={style.header}>\r\n        <img\r\n          src=\"https://www.iconarchive.com/download/i24292/martin-berube/animal/snake.ico\"\r\n          alt=\"image1\"\r\n          className={style.image}\r\n        />\r\n        {isGameStarted ? (\r\n          <h1 className={style.heading}>\r\n            {' '}\r\n            {headerScore > 0 && (\r\n              <span className={style.score}>\r\n                {headerScore}\r\n                {headerScore === 1 ? ' point' : ' points'}\r\n                {/* {!(headerScore % 10) && <span>Level Up! speed+5!</span>} */}\r\n              </span>\r\n            )} \r\n          </h1>\r\n        ) : (\r\n          <h1 className={style.heading}> THIS IS SNAKE GAME !</h1>\r\n        )}\r\n\r\n        <div className={style.buttonWrapper}>\r\n          {isGameStarted ? (\r\n            <>\r\n              <button type=\"button\" onClick={stopGame} className={style.button}>\r\n                end game\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button type=\"button\" className={style.button} onClick={showGameResults}>results</button>\r\n              <button type=\"button\" onClick={showGameOptions} className={style.button}>\r\n                options\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, {FC, useState} from 'react';\r\nimport style from './options.module.css';\r\n\r\nconst gridSize = [\r\n  {name: 'small', size: 10},\r\n  {name: 'medium', size: 15},\r\n  {name: 'large', size: 22},\r\n  {name: 'extra large', size: 30},\r\n];\r\n\r\nconst speedLevel = [\r\n  {name: 'slow', time: 350},\r\n  {name: 'medium', time: 250},\r\n  {name: 'fast', time: 180},\r\n  {name: 'extra fast', time: 120},\r\n];\r\n\r\ntype Props = {\r\n  handleOptions: (event: React.FormEvent<HTMLFormElement>, selectedGrid: number, selectedSpeed: number) => void;\r\n  cancelOption: () => void;\r\n  activeOptions: boolean;\r\n  gameGridSize: number;\r\n  gameMoveTime: number;\r\n};\r\n\r\ntype SpeedLevel = {\r\n  name: string;\r\n  time: number;\r\n};\r\n\r\ntype GridSize = {\r\n  name: string;\r\n  size: number;\r\n};\r\nconst Options: FC<Props> = ({handleOptions, cancelOption, gameGridSize, gameMoveTime, activeOptions}) => {\r\n  const [selectedSpeedLevel, setSelectedSpeedLevel] = useState(gameMoveTime);\r\n  const [selectedGridSize, setSelectedGrizSize] = useState(gameGridSize);\r\n  \r\n  return (\r\n    <div className={`${style.OptionsWrapper} ${activeOptions && style.active}`}>\r\n      <form\r\n        className={style.options}\r\n        action=\"submit\"\r\n        onSubmit={(event) => handleOptions(event, selectedGridSize, selectedSpeedLevel)}\r\n      >\r\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\r\n        <label htmlFor=\"gridSize\" className={style.label}>\r\n          Select grid size\r\n          <select\r\n            className={style.dropDownList}\r\n            id=\"gridSize\"\r\n            name=\"gridSize\"\r\n            value={selectedGridSize}\r\n            onChange={(e) => setSelectedGrizSize(parseInt(e.target.value, 10))}\r\n          >\r\n            {gridSize.map((grid: GridSize) => (\r\n              <option key={grid.name} value={grid.size}>\r\n                {grid.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"speedLevel\" className={style.label}>\r\n          Select game speed\r\n          <select\r\n            className={style.dropDownList}\r\n            id=\"speedLevel\"\r\n            name=\"speedLevel\"\r\n            value={selectedSpeedLevel}\r\n            onChange={(e) => setSelectedSpeedLevel(parseInt(e.target.value, 10))}\r\n          >\r\n            {speedLevel.map((level: SpeedLevel) => (\r\n              <option key={level.name} value={level.time}>\r\n                {level.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n        <div className={style.buttonWrapper}>\r\n          <button type=\"submit\" className={style.button}>\r\n            {' '}\r\n            SAVE\r\n          </button>\r\n          <button type=\"button\" className={style.button} onClick={cancelOption}>\r\n            CANCEL\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from 'react';\r\nimport style from './startAnimation.module.css';\r\n\r\nconst StartAnimation = () => {\r\n  return (\r\n    <div className={style.animationWrapper}>\r\n      <span className={style.animation}>\r\n        <span className={style.firstWord}>Let's</span>\r\n        <span className={style.secondWord}>GO!!!</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartAnimation;\r\n","import React, {FC} from 'react';\r\nimport style from './results.module.css';\r\nimport type {Result} from '../../App';\r\n\r\ntype Props = {\r\n  results: Result[];\r\n  cancelResults: () => void;\r\n  activeResults: boolean;\r\n};\r\n\r\nconst Results: FC<Props> = ({cancelResults, activeResults, results}) => {\r\n  return (\r\n    <div className={`${style.ResultsWrapper} ${activeResults && style.active}`}>\r\n      <div className={style.results}>\r\n        {results.map(({id, name, score, speedLevel, gridSize}) => (\r\n          <div key={id} className={style.resultList}>\r\n            <h1>{name} / {score} / {speedLevel} /{gridSize}</h1>\r\n          </div>\r\n        ))}\r\n        <button type=\"button\" className={style.button} onClick={cancelResults}>\r\n          CANCEL\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, {useState, FC} from 'react';\r\nimport style from './gameOver.module.css';\r\n\r\ntype Props = {\r\n  score: number;\r\n  resultName:string;\r\n  handleResults: () => void;\r\n  endGameHandler: () => void;\r\n  inputNameHandler:(e: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nconst GameOver: FC<Props> = ({score, endGameHandler, handleResults, resultName, inputNameHandler}) => {\r\n  return (\r\n    <div className={style.gameOver}>\r\n      <span className={style.score}> Congratz, you got {score} points! </span>\r\n      <label htmlFor=\"inputName\" className={style.label}>\r\n        <p>enter your name to save result!</p>\r\n        <div className={style.inputWrapper}>\r\n          <input\r\n            id=\"inputValue\"\r\n            type=\"text\"\r\n            value={resultName}\r\n            onChange={inputNameHandler}\r\n          />\r\n          <button onClick={() => handleResults()} type=\"button\">\r\n            save\r\n          </button>\r\n        </div>\r\n      </label>\r\n      <button type=\"button\" className={style.button} onClick={endGameHandler}>\r\n        {' '}\r\n        Play Again!\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}