{"version":3,"sources":["App.tsx","drawGrid.tsx","reportWebVitals.ts","index.tsx"],"names":["grid","head","food","GRID_SIZE","fillOneCell","cell","color","y","x","possibleKeypress","tail","directions","keyPress","score","App","useState","moveTime","setMoveTime","refreshGrid","setRefreshGrid","animation","setAnimation","start","gameOver","gameOptions","setGameOptions","useEffect","document","body","addEventListener","e","console","log","keyPressHandler","key","positionCheck","moveTail","moveHead","interval","setInterval","clearInterval","pressedKey","forEach","allowedDirection","t","dir","push","addNewFruit","_","showAnimation","shift","setTimeout","className","map","element","el","style","width","height","id","type","onClick","size","gridArr","gridArr2d","i","j","drawGrid","splice","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3c241ddb.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport * as _ from 'lodash';\nimport './App.css';\nimport 'flexboxgrid';\nimport {drawGrid, Grid, CellColor, Cell, Direction} from './drawGrid';\n\nconst GRID_SIZE = 22;\nlet grid: Grid[][];\n\nconst fillOneCell = (cell: Cell, color: CellColor) => {\n  grid[cell.y][cell.x].cell = color;\n};\n\nconst possibleKeypress: Direction[] = ['ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'];\n\nlet head: Cell;\nlet food: Cell;\nconst tail: Cell[] = [];\n\n// type AllColorCells = {\n//   head: Cell;\n//   food: Cell;\n//   tail: Cell[];\n// };\n\n// const allColorCells:AllColorCells = {\n//   head: {x: 2, y: 0},\n//   food: {x: _.random(GRID_SIZE - 1), y: _.random(GRID_SIZE - 1)},\n//   tail: [ {x: 0, y: 0},  {x: 1, y: 0}],\n// };\n\nconst directions: Direction[] = ['ArrowRight'];\nlet keyPress = '';\nlet score = 0;\n\nconst App = () => {\n  const [moveTime, setMoveTime] = useState(210);\n  const [refreshGrid, setRefreshGrid] = useState(true);\n  const [animation, setAnimation] = useState(false);\n  const [gameOptions, setGameOptions] = useState({start: false, gameOver: false});\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', (e) => {\n      console.log(directions);\n      keyPressHandler(e.key);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!gameOptions.start) {\n      return;\n    }\n    positionCheck();\n    moveTail();\n    moveHead(keyPress);\n    const interval = setInterval(() => {\n      setRefreshGrid(!refreshGrid);\n    }, moveTime);\n    // eslint-disable-next-line consistent-return\n    return () => clearInterval(interval);\n  }, [refreshGrid]);\n\n  // const findNextKeypress = () => {\n  //   if (directions.length > 1) {\n  //     // eslint-disable-next-line prefer-destructuring\n  //     keyPress = directions[0];\n  //     directions.splice(0, 1);\n  //     return;\n  //   }\n  //   // eslint-disable-next-line prefer-destructuring\n  //   keyPress = directions[0];\n  // };\n  const keyPressHandler = (pressedKey: string) => {\n    possibleKeypress.forEach((allowedDirection) => {\n      if (pressedKey === allowedDirection) {\n        if (pressedKey === 'ArrowLeft' && keyPress === 'ArrowRight') {\n          return;\n        }\n        if (pressedKey === 'ArrowRight' && keyPress === 'ArrowLeft') {\n          return;\n        }\n        if (pressedKey === 'ArrowDown' && keyPress === 'ArrowUp') {\n          return;\n        }\n        if (pressedKey === 'ArrowUp' && keyPress === 'ArrowDown') {\n          return;\n        }\n        // directions.push(pressedKey);\n        keyPress = pressedKey;\n      }\n    });\n  };\n\n  const positionCheck = () => {\n    tail.forEach((t) => {\n      if (t.x === head.x && t.y === head.y) {\n        setGameOptions({start: false, gameOver: true});\n      }\n    });\n  };\n\n  const startGame = () => {\n    setGameOptions({...gameOptions, start: true});\n    grid = drawGrid(GRID_SIZE);\n    keyPress = 'ArrowRight';\n    head = {x: 2, y: 0};\n    tail.splice(0, tail.length);\n    tail.push({x: 0, y: 0});\n    tail.push({x: 1, y: 0});\n    food = {x: _.random(GRID_SIZE - 1), y: _.random(GRID_SIZE - 1)};\n    fillOneCell(head, 'snake');\n    tail.forEach((t) => fillOneCell(t, 'tail'));\n    fillOneCell(food, 'food');\n    setRefreshGrid(!refreshGrid);\n  };\n\n  const moveHead = (dir: string) => {\n    switch (dir) {\n      case 'ArrowRight':\n        if (head.x === GRID_SIZE - 1) {\n          head = {x: 0, y: head.y};\n        } else {\n          head = {x: head.x + 1, y: head.y};\n        }\n        fillOneCell({x: head.x, y: head.y}, 'snake');\n        break;\n\n      case 'ArrowDown':\n        if (head.y === GRID_SIZE - 1) {\n          head = {x: head.x, y: 0};\n        } else {\n          head = {x: head.x, y: head.y + 1};\n        }\n        fillOneCell({x: head.x, y: head.y}, 'snake');\n        break;\n      case 'ArrowLeft':\n        if (head.x === 0) {\n          head = {x: GRID_SIZE - 1, y: head.y};\n        } else {\n          head = {x: head.x - 1, y: head.y};\n        }\n        fillOneCell({x: head.x, y: head.y}, 'snake');\n        break;\n      case 'ArrowUp':\n        if (head.y === 0) {\n          head = {x: head.x, y: GRID_SIZE - 1};\n        } else {\n          head = {x: head.x, y: head.y - 1};\n        }\n        fillOneCell({x: head.x, y: head.y}, 'snake');\n        break;\n    }\n  };\n\n  const moveTail = () => {\n    tail.push({x: head.x, y: head.y});\n    fillOneCell(tail[0], 'empty');\n    addNewFruit();\n    tail.forEach((t) => fillOneCell(t, 'tail'));\n  };\n\n  const addNewFruit = () => {\n    if (head.x === food.x && head.y === food.y) {\n      if (score % 5 === 0) {\n        if (moveTime > 20) {\n          setMoveTime(moveTime - 10);\n        }\n      }\n      score += 1;\n      food = {x: _.random(GRID_SIZE - 1), y: _.random(GRID_SIZE - 1)};\n      fillOneCell(food, 'food');\n      showAnimation();\n    } else {\n      tail.shift();\n    }\n    tail.forEach((t) => {\n      if (t.x === food.x && t.y === food.y) {\n        food = {x: _.random(GRID_SIZE - 1), y: _.random(GRID_SIZE - 1)};\n        fillOneCell(food, 'food');\n      }\n    });\n  };\n\n  const showAnimation = () => {\n    if (score === 0 || score % 5) {\n      return;\n    }\n    setAnimation(true);\n    setTimeout(() => {\n      setAnimation(false);\n    }, 4000);\n  };\n\n  return (\n    <div>\n      <div className=\"container center-xs\">\n        <h1 className=\"heading\">\n          {' '}\n          {score > 0 && (\n            <span className=\"score\">\n              {score}\n              {score === 1 ? ' point' : ' points'}\n            </span>\n          )}\n        </h1>\n        <div className=\"row center-xs game-wrapper\">\n          <div className=\"col-xs-12\">\n            <div className=\"game\">\n              {!gameOptions.start ? (\n                <button type=\"button\" className=\"button\" onClick={() => startGame()}>\n                  {' '}\n                  start\n                </button>\n              ) : (\n                <>\n                  {animation && (\n                    <div className=\"animation\">\n                      <h1>LEVEL UP</h1>\n                      <h1>SPEED +10</h1>\n                    </div>\n                  )}\n                  {grid &&\n                    grid.map((element) =>\n                      element.map((el) => (\n                        <span\n                          className={el.cell}\n                          key={el.id}\n                          style={{width: `${800 / GRID_SIZE}px`, height: `${800 / GRID_SIZE}px`}}\n                        >\n                          {/* {el.id} */}\n                        </span>\n                      ))\n                    )}\n                </>\n              )}\n              {gameOptions.gameOver && (\n                <button\n                  type=\"button\"\n                  className=\"button button--gameOver\"\n                  onClick={() => {\n                    setGameOptions({start: false, gameOver: false});\n                    score = 0;\n                  }}\n                >\n                  {' '}\n                  <span className=\"score\"> Congratz, you got {score} points! </span>\n                  Play Again!\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export type CellColor = 'empty' | 'snake' | 'food' | 'tail';\r\nexport type Direction = 'ArrowUp' | 'ArrowRight' | 'ArrowLeft' | 'ArrowDown';\r\nexport type Cell = {x: number; y: number};\r\nexport type Grid = {id: number; cell: CellColor};\r\n\r\nexport const drawGrid = (size: number): Grid[][] => {\r\n  let gridArr: Grid[] = [];\r\n  const gridArr2d: Grid[][] = [];\r\n  let id = 1;\r\n  for (let i = 0; i < size; i++) {\r\n    for (let j = 0; j < size; j++) {\r\n      gridArr.push({id, cell: 'empty'});\r\n      id += 1;\r\n    }\r\n    gridArr2d.push(gridArr);\r\n    gridArr = [];\r\n  }\r\n  return gridArr2d;\r\n};\r\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}